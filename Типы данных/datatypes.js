let text = "Hello,world!";
console.log(typeof text); //string

let age = 26;
console.log(typeof age); //number

let isSure = true;
console.log(typeof isSure); //boolean

let x;
console.log(typeof x); //undefined

let amount = null;
console.log(typeof amount);  //object 

const cities = ["Moscow", "Saint-Petersburg", "Vladivostok"];
console.log(typeof cities);  //object

const user = {
    name: "Anna",
    age: "26",
};
console.log(typeof user); //object

const name = "Anna";
function greeting(name) {
    return `Hello, ${name} !`;
}
console.log(typeof greeting);  //function


/* Примитивные типы данных мы храним по значению прямо в переменной. Каждая новая созданная переменная с примитивным типом данных
занимает свою "ячейку памяти". Да, при этом мы можем присваивать значения одной переменной другой переменной: 

let x = 1;
let y = x;
console.log(y); //1

Но таким образом мы просто копируем значение из одной переменной в другую переменную, которая в свою очередь занимает такую же отдельную(наверное 
можно сказать изолированную)"ячейку памяти". И так как эти две переменные занимают разные "ячейки", то одна "ячейка" никак не отреагирует
на изменения во второй. То есть мы можем безопасно менять значения в одной переменной, не затрагивая при этом другую переменную.

let x = 1;
let y = x;
console.log(y); //1

console.log(x); //1

let y = 2;
console.log(y); //2

console.log(x); //1


    Сложные данные являются ссылочными типами данных(массивы, объекты, функции) и хранятся они по ссылке на место в памяти компьютера. Таким образом 
в переменной хранится лишь ссылка на данные.Таким образом при присваивании значения одной переменной в другую переменную мы копируем 
точно такую же ссылку. Поэтому изменяя какие либо данные в объекте в одной переменной, мы изменяем их для всех переменных, которые ссылаются 
на этот объект.

const person = {
    name: "Anna"
};

const person2 = person;

console.log(person);   // {name: 'Anna'}
console.log(person2);  // {name: 'Anna'}

person2.name = "Anya";

console.log(person);   // {name: 'Anya'}
console.log(person2);  // {name: 'Anya'}

Как мы видим значения изменились во всех переменных, хотя изменения мы вносили для переменной person2.

Пример для понимания принципа(для меня он оказался самым понятным): 
    У нас есть лист бумаги в клеточку, и в одной из клеточек мы написали цифру 1, затем решили срисовать это
значение и занести его в соседнюю клеточку; теперь у нас две клеточки в которых написана цифра один, они выглядят одинаково; но 
однажды кто-то решил из первой клеточки стереть цифру 1 и заменить на цифру 2; и теперь у нас две совершенно разные клеточки - в одной написана
цифра 1 а в другой 2.(так хранятся примитивные типы данных в переменных)
    У нас есть все тот же лист бумаги в клеточку, но теперь мы на нем начали писать конспект, не закончили и положили его на стол и оставили там.
Наш друг обращается к нам и просит этот конспект. Конечно мы другу сообщаем где лежит этот листик с нашим конспектом, и теперь он тоже знает где
находится написанный на листе конспект и может в любой момент его прочитать или дописать(при этом не перекладывая ни в какое другое место и не 
списывая информацию на другой лист). (это пример хранения ссылочного типа данных)  */