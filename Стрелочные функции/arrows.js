// 1. Напиши функцию, которая принимает массив чисел, совершает над ними любую математическую операцию и возвращает новый массив,
//  содержащий результаты этих операций, используя стрелочные функции;

const arrayOfNumbers = [1, 2, 3, 4, 5];  //исходный массив

const changeArray = (arr) => {   // объявляем функцию changeArray, которая принимает в параметрах массив чисел
    return arr.map(n => n + 1);  // функция возвращает новый массив,основанный на исходном массиве, к которому был примененм метод map
};

console.log(changeArray(arrayOfNumbers)); //[2, 3, 4, 5, 6]


// также доступна упрощенная запись функции - без круглых скобок вокруг единственного параметра и без оператора return

const getSquaresOfArray = arr => arr.map(n => n ** 2);
console.log(getSquaresOfArray(arrayOfNumbers));  //[1, 4, 9, 16, 25]


//2. Создай объект с методом, который использует стрелочную функцию внутри метода `setTimeout`
//  для вывода значения свойства объекта через 1 секунду;

const user = {
    name: 'Alice',
    age: '30',
    city: 'Moscow',
    greet: function () {
        console.log(this);    // this указывает на  объект user 
        setTimeout(() => {
            console.log(`Name: ${this.name}, age: ${this.age}, city: ${this.city}`); // значения свойств(name, age, city) объекта выведутся в консоль через 1 сек после вызова функции
        }, 1000);
    }
};

user.greet() // Name: Alice, age: 30, city: Moscow (c задержкой 1с)
// все это возможно, тк стрелочные функции используют this из внешнего контекста(в нашем случае из функции greet).




//3. Реализуй функцию высшего порядка, которая принимает функцию и массив, 
// и применяет эту функцию ко всем элементам массива, используя стрелочные функции.

array = [1, 2, 3, 4, 5];

function applyOperationToArray(arr, operation) {  // функция applyOperationToArray принимает массив и функцию (операция которая будет проводиться над массивом)
    return operation(arr);                        // и возвращает результат вызова функции operation (где параметром является все тот же массив)
};

const applyOperationToArray2 = (arr, operation) => operation(arr);    // также можно объявить эту функцию тоже как стрелочную


const getHalves = (arr) => arr.map(n => n / 2);   // отдельно у нас существует функция getHalves, которая возвращает новый массив путем деления каждого элемента массива на 2

console.log(applyOperationToArray(array, getHalves));  // при вызове функции applyOperationToArray в аргументы мы передаем наш исходный массив и фунцию - операцию которую хотим над ним совершить
// [0.5, 1, 1.5, 2, 2.5]

console.log(applyOperationToArray2(array, getHalves)); // [0.5, 1, 1.5, 2, 2.5] 


