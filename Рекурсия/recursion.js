// 1. Напиши рекурсивную функцию для вычисления суммы всех элементов в массиве;

arr = [1, 2, 3, 4, 5,];


function sumElOfArr(arr) {   // функция принимает в качестве аргумента массив

    if (arr.length === 0) {   // базовый случай - если массив пустой,то возвращаем ноль
        return 0;
    }

    return arr[0] + sumElOfArr(arr.slice(1));  // и из функции возвращаем первый элемент массива плюс рекурсивно вызываем эту же функцию
    // а в качестве аргумента передаем новый массив на основе старого,только без первого элемента(его мы уже вытянули из массива)
};

console.log(sumElOfArr(arr)); //15



// 2. Реализуй функцию для нахождения максимального элемента в массиве с использованием рекурсии;

numbers = [1, 4, 7, 90, 3, 10];

function findMax(arr) {
    if (arr.length === 1) {    // базовый случай - если в массиве всего один элемент - он и есть самый максимальный элемент
        return arr[0];
    }

    return Math.max(arr[0], findMax(arr.slice(1)));  // сравниваем первый элемент массива с максимумом остальных элементов рекурсивно(используем для сравнения метод Math.max)
};

console.log(findMax(numbers)); //90


// 3. Вернись к функции глубокого копирования объектов.

// 4. А вот теперь нужно реализовать функцию для вычисления чисел Фибоначчи с кэшированием через рекурсию! 
// Требования те же, что и в предыдущем уроке.


function createFibonacciCalculator() {

    let fibonacciNumbers = [0, 1,];

    return function fibonacci(n) {  // возвращаемую функцию обязательно надо именовать чтобы мы могли ее затем вызвать рекурсивно
        if (n < 0) {
            console.log("введено отрицательное значение n");
            return;
        }

        if (fibonacciNumbers[n] !== undefined) {   // добавляем проверку на то существует ли уже такое значение в кэше
            return fibonacciNumbers[n];            // если есть то сразу возвращаем
        }

        fibonacciNumbers[n] = fibonacci(n - 1) + fibonacci(n - 2);  // вычисляем и сохраняем значение (вместо цикла в этом месте теперь рекурсия)

        return fibonacciNumbers[n];   // возвращаем значение
    };
};

const fib = createFibonacciCalculator();

console.log(fib(1)); //1
console.log(fib(5)); //5
console.log(fib(10)); //55